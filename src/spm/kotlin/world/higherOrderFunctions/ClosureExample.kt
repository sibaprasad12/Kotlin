package spm.kotlin.world.higherOrderFunctionsfun main(args: Array<String>) {    val program = Program1()//    val myLambda: (Int) -> Unit = {s:Int -> println(s)}    // another way//    val myLambda1: (Int, Int) -> Int = {a:Int, b: Int -> a+b}    /**     * In the below code result is an outside variable of lambda function     * but in kotlin we can change the outside value     *     */    var result = 0    program.addTowNumbers(30, 20) { a, b -> result = a + b }    println(result)}class Program1 {    fun addTowNumbers(a: Int, b: Int) {        val sum = a + b        println(sum) // body    }    fun addTowNumbers(a: Int, b: Int, action: MyInterface) {        val sum = a + b        action.execute(sum)    }    /**     * calling function with lambda expression     * the 3rd parameter will be of type MyLambda - (Int) -> Unit     */    fun addTowNumbers(a: Int, b: Int, action: (Int) -> Unit) {        val sum = a + b        action(sum)    }    // another way    fun addTowNumbers(a: Int, b: Int, action: (Int, Int) -> Unit) {        val result = action(a, b)        println(result)    }}interface MyInterface1 {    fun execute(sum: Int)}