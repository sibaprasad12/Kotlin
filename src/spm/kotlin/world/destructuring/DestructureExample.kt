package spm.kotlin.world.destructuring/** * What is Destructuring in Kotlin * Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and Arrays. * It can be used in locations that receive data (such as the left-hand side of an assignment). * * Pair * By using Pair we can return 2 values from a function * if weâ€™re going to return two values of any type, we can return a Pair<T, R> from the function and destructure it on the call site: * * Tripple * By using tripple we can return 3 values from a function * we can return three values of any type with the Triple<T, R, Q> type */fun main() {    val (firstName, lastName) = getPair("Sibaprasad", "Mohanty")    println("Combined name $firstName $lastName")    val (firstName1, lastName1, age) = getTripple("Sibaprasad", "Mohanty", 32)    println("Combined Tripple name $firstName1 $lastName1 Age = $age")}fun getPair( name1:String,  name2 : String) : Pair<PairA, PairB> {    return Pair(PairA(name1), PairB(name2))}fun getTripple( name1:String,  name2 : String, age:Int) : Triple<PairA, PairB, TrippleObj> {    return Triple(PairA(name1), PairB(name2), TrippleObj(age) )}fun getmultipleValues() : Pair<String, String>{    return "siba" to "satya"}data class PairA(val firstName:String)data class PairB(val lastName:String)data class TrippleObj(val age :Int)data class DeveloperObj(val name : String, val role : String)