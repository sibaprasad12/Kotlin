package spm.kotlin.world.dataClass/** * Data class make it easy to create classes that are used to store values. * Such classes are automatically provided with methods for copying, * getting a string representation, and using instances in collections. * You can override these methods with your own implementations in the class declaration. *//** * When we mark a class as a data class, you donâ€™t have to implement or create the following functions as we do in Java.hashCode()equals()toString()copy() *//** * Although, there are few requirements that data classes need to fulfill:The primary constructor needs to have at least one parameter.All primary constructor parameters need to be marked as val or varData classes cannot be abstract, open, sealed, or inner. */data class User(var name: String, val id: Int) {           // 1    override fun equals(other: Any?) =        other is User && other.id == this.id               // 2}fun main() {    val user = User("Alex", 1)    println(user)                                          // 3    val secondUser = User("Alex", 1)    val thirdUser = User("Max", 2)    println("user == secondUser: ${user == secondUser}")   // 4    println("user == thirdUser: ${user == thirdUser}")    // hashCode() function    println(user.hashCode())                               // 5    println(secondUser.hashCode())    println(thirdUser.hashCode())    // copy() function    println(user.copy())                                   // 6    println(user === user.copy())                          // 7    println(user.copy("Max"))                              // 8    println(user.copy(id = 3))                             // 9    println("name = ${user.component1()}")                 // 10    println("id = ${user.component2()}")}