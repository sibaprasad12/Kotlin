package dispatchersimport kotlinx.coroutines.*/** * Since delay is a suspending function, call to delay results in non-blocking * suspension thereby allowing the other Coroutine to execute. * After 5 seconds when delay’s execution is finished we continue the execution * of Coroutine from the point we left. *    In the case of Thread.sleep() since it is a blocking call,    the Coroutine is blocked for 5 seconds and only when it is done executing    the other Coroutine gets a chance to run. */fun main() {    delayFUnction()//    threadSleepFUnction()} fun delayFUnction(){    runBlocking {        CoroutineScope(Dispatchers.Main).launch {            println("Coroutine 1 started")            delay(3000)            println("Coroutine 1 finished execution")        }        CoroutineScope(Dispatchers.Main).launch {            println("Coroutine 2 started execution")        }    }     /**      * Output: Now you will see that first “launched coroutine 1” is printed,      * after that “launched coroutine 2” and      * when 5 seconds are over “Here after a delay of 5 seconds”.      */ }fun threadSleepFUnction(){    runBlocking {        CoroutineScope(Dispatchers.IO).launch {            println("Coroutine 1 started")            Thread.sleep(3000)            println("Coroutine 1 finished execution")        }        launch {            println("Coroutine 2 started execution")        }    }    /**     * Output: You will notice that first “launched coroutine 1” is printed     * then after 5 seconds “Here after a delay of 5 seconds” and     * then finally “launched coroutine 2” is printed.     */}